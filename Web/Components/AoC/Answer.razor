@implements IDisposable
@inject SessionState Session
@inject AocJsInterop aocJS
@inject IOptions<AocSettings> aocSettings
@using Microsoft.Extensions.Options

<p class="answer">
    @ChildContent
	<pre><code><span>Your puzzle answer is </span></code><code @ref="_codeElement">@PuzzleAnswer</code></pre>
    <span>
        <button type="button"
				class="btn btn-primary"
				disabled="@(PuzzleAnswer.StartsWith("*") && PuzzleAnswer.EndsWith("*"))"
				title="Copy the answer to the clipboard."
				@onclick="CopyTextToClipboard">
			Copy <i class="bi-clipboard" aria-hidden="true"></i>
		</button>
    </span>
    <span>
        <a class="btn btn-primary"
		   href="@($"{aocSettings.Value.Site}{Year}/day/{Day}")"
		   title="Open a new page and navigate to the AdventOfCode site to enter the answer."
		   target="_blank">
		   Jump <i class="bi-box-arrow-up-right" aria-hidden="true"></i></a>
    </span>
</p>

@code {
    const string SOLVING = "** Solving... **";

    [Parameter] public int Year { get; set; }
    [Parameter] public int Day { get; set; }
    [Parameter] public int ProblemNo { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public string PuzzleAnswer { get; set; } = "";

    private ElementReference _codeElement;


    protected override void OnInitialized() {
        Session.OnProblemInputChange += DataHasChanged;
        PuzzleAnswer = "";
    }

    protected override void OnParametersSet() {
        DataHasChanged();
    }

    protected void DataHasChanged() {
        PuzzleAnswer = SOLVING;
        StateHasChanged();
        try {
            PuzzleAnswer = SolutionRouter.SolveProblem(Year, Day, ProblemNo,
                Session.DoesProblemInputExist(Year, Day) ? Session.GetProblemInputAsArray(Year, Day) : null);
        } catch (Exception ex) {
            PuzzleAnswer = "** EXCEPTION **" + Environment.NewLine + ex?.Message ?? "Exception";
        }
        if (PuzzleAnswer.IndexOf(Environment.NewLine) > 16)
        {
            PuzzleAnswer = Environment.NewLine + PuzzleAnswer;
        }
        StateHasChanged();
    }

    private async Task CopyTextToClipboard() {
        await aocJS.CopyToClipboard(_codeElement);
    }

    public void Dispose() {
        Session.OnProblemInputChange -= DataHasChanged;
    }
}