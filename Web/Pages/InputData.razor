@inject SessionState Session
@inject IAocClient aocClient
@inject IGithubClient githubClient
@inject IJSRuntime JSRuntime
<article class="day-desc">
    <EditForm Model="@inputModel" OnSubmit="@UseInputData">
        <h2>--- Input --- <span>
                <button class="btn btn-primary" disabled="@IsGetDisabled" @onclick="() => LoadInputData()">My Data</button>
                <button class="btn btn-primary" disabled="@IsCopperBeardyGetDisabled" @onclick="@(() => LoadInputDataFromGithub("CopperBeardy"))">Beardy Data</button>
            </span>
            <button type="button" class="btn btn-primary" disabled="@IsCopyDisabled" @onclick="CopyTextToClipboard">Copy</button>
            <input type="submit" disabled="@IsUseDisabled" value="Use" class="btn btn-primary" />
        </h2>
        <textarea @bind="inputModel.InputData" @bind:event="oninput" rows="20" cols="80"></textarea>
    </EditForm>
    <div hidden @ref="_codeElement">@inputModel.InputData</div>
</article>

@code {
    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Day { get; set; }

    public string Input { get; set; } = "";
    private bool IsGetDisabled => IsLoading;
    private bool IsCopperBeardyGetDisabled => IsLoading;
    private bool IsCopyDisabled => string.IsNullOrEmpty(inputModel.InputData);
    private bool IsUseDisabled => string.IsNullOrEmpty(inputModel.InputData);
    private bool IsLoaded = false;
    private bool IsLoading = false;

    class InputModel {
        public string InputData { get; set; } = "";
    }
    InputModel inputModel = new();

    private ElementReference _codeElement;

    protected override void OnParametersSet() {
        IsLoaded = false;
        inputModel.InputData = "";
        if (Session.DoesProblemInputExist(Year, Day)) {
            inputModel.InputData = Session.GetProblemInputAsString(Year, Day);
            Input = inputModel.InputData;
            IsLoaded = true;
        }
    }

    async void LoadInputData() {
        IsLoading = true;
        inputModel.InputData = await aocClient.GetInputData(Year, Day);
        Input = inputModel.InputData;
        IsLoading = false;
        IsLoaded = true;
        StateHasChanged();
        Session.SetProblemInput(Year, Day, inputModel.InputData);

    }

    async void LoadInputDataFromGithub(string userName) {
        IsLoading = true;
        inputModel.InputData = await githubClient.GetInputData(userName, Year, Day);
        Input = inputModel.InputData;
        IsLoading = false;
        IsLoaded = true;
        StateHasChanged();
        Session.SetProblemInput(Year, Day, inputModel.InputData);

    }

    void UseInputData() {
        Session.SetProblemInput(Year, Day, inputModel.InputData);
        StateHasChanged();
    }

    private async Task CopyTextToClipboard() {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", _codeElement);
    }

}
