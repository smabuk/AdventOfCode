@implements IDisposable
@inject SessionState Session
@inject AocJsInterop aocJS
@inject IOptions<AocSettings> aocSettings
@using Microsoft.Extensions.Options

<p class="answer">
    @ChildContent
    Your puzzle answer is
    <code @ref="_codeElement">@PuzzleAnswer</code>
    <span>
        <button type="button" class="btn btn-primary" hidden="@string.IsNullOrWhiteSpace(PuzzleAnswer)" @onclick="CopyTextToClipboard">Copy</button>
    </span>
    <span>
        <a class="btn btn-primary" href="@($"{aocSettings.Value.Site}{Year}/day/{Day}")" target="_blank">Jump</a>
    </span>
</p>

@code {
    [Parameter] public int Year { get; set; }
    [Parameter] public int Day { get; set; }
    [Parameter] public int ProblemNo { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public string PuzzleAnswer { get; set; } = "";

    private ElementReference _codeElement;


    protected override void OnInitialized() {
        Session.OnProblemInputChange += DataHasChanged;
    }

    protected override void OnParametersSet() {
        PuzzleAnswer = SolutionRouter.SolveProblem(Year, Day, ProblemNo,
            Session.DoesProblemInputExist(Year, Day) ? Session.GetProblemInputAsArray(Year, Day) : null);
    }

    protected void DataHasChanged() {
        PuzzleAnswer = SolutionRouter.SolveProblem(Year, Day, ProblemNo,
            Session.DoesProblemInputExist(Year, Day) ? Session.GetProblemInputAsArray(Year, Day) : null);
        StateHasChanged();
    }

    private async Task CopyTextToClipboard() {
        await aocJS.CopyToClipboard(_codeElement);
    }

    public void Dispose() {
        Session.OnChange -= DataHasChanged;
    }
}